import Head from "next/head";
import { useState } from "react";
import { AiOutlineCheckCircle } from "react-icons/ai";
import { z } from "zod";

export default function Home() {
	const [contactForm, setContactForm] = useState({
		name: "",
		email: "",
		subject: "",
		message: "",
	});
	const { name, email, subject, message } = contactForm;

	const [formErrors, setFormErrors] = useState({
		name: "",
		email: "",
		subject: "",
		message: "",
	});

	const [validForm, setValidForm] = useState(false);

	// Zod Schema
	const contactFormSchema = z.object({
		name: z
			.string()
			.min(3, "Please enter a name between 3-25 characters")
			.max(25, "Please enter a name between 3-25 characters"),
		email: z.string().email(),
		subject: z
			.string()
			.min(3, "Please enter a subject between 3-25 characters")
			.max(25, "Please enter a subject between 3-25 characters"),
		message: z.string().min(3, "Message min length is 3"),
	});

	const handleChange = (e: any) => {
		setContactForm((prevState) => ({
			...prevState,
			[e.target.name]: e.target.value,
		}));
	};

	const handleSubmit = (e: any) => {
		e.preventDefault();

		// Form Validtion
		const result = contactFormSchema.safeParse(contactForm);
		if (!result.success) {
			const formattedErrors = result.error.format();
			setFormErrors((prevState) => ({
				...prevState,
				name: formattedErrors.name?._errors.join(", ") || "",
				email: formattedErrors.email?._errors.join(", ") || "",
				subject: formattedErrors.subject?._errors.join(", ") || "",
				message: formattedErrors.message?._errors.join(", ") || "",
			}));
		} else {
			setFormErrors((prevState) => ({
				...prevState,
				name: "",
				email: "",
				subject: "",
				message: "",
			}));

			setValidForm(true);
		}
	};

	return (
		<>
			<Head>
				<title>Zod Example</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="mx-auto">
				<div className="mt-10 mb-48">
					<div className="mb-5">
						<h1 className="text-3xl text-center lg:text-4xl font-medium">Zod Form Example</h1>
					</div>

					{!validForm ? (
						<form
							onSubmit={handleSubmit}
							className="flex flex-col mx-auto w-[85%] max-w-[750px]">
							<div
								className={`${
									formErrors.name ? "border-red-500" : ""
								} floating-form-border`}>
								<input
									type="text"
									name="name"
									id="name"
									value={name}
									onChange={handleChange}
									placeholder=" "
									className="floating-input"
								/>
								<label htmlFor="name" className="floating-label">
									Name
								</label>
							</div>

							<span className="form-error-message text-xs -mt-2">{formErrors.name}</span>

							<div
								className={`${
									formErrors.email ? "border-red-500" : ""
								} floating-form-border `}>
								<input
									type="email"
									name="email"
									id="email"
									value={email}
									onChange={handleChange}
									placeholder=" "
									className="floating-input"
								/>
								<label htmlFor="email" className="floating-label">
									Email
								</label>
							</div>

							{formErrors.email && (
								<span className="form-error-message -mt-2">{formErrors.email}</span>
							)}
							<div
								className={`${
									formErrors.subject ? "border-red-500" : ""
								} floating-form-border`}>
								<input
									type="text"
									name="subject"
									id="subject"
									value={subject}
									onChange={handleChange}
									placeholder=" "
									className="floating-input"
								/>
								<label htmlFor="subject" className="floating-label">
									Subject
								</label>
							</div>

							<span className="form-error-message text-xs -mt-2">{formErrors.subject}</span>

							<div
								className={`${
									formErrors.message ? "border-red-500" : ""
								} floating-form-border`}>
								<textarea
									name="message"
									id="message"
									value={message}
									onChange={handleChange}
									rows={3}
									placeholder=" "
									className="floating-input resize-none"
								/>
								<label htmlFor="message" className="floating-label">
									Message
								</label>
							</div>

							<span className="form-error-message -mt-2">{formErrors.message}</span>

							<button type="submit" className="btn-primary mt-3">
								Submit
							</button>
						</form>
					) : (
						<div className=" text-2xl mt-10 flex justify-center mx-auto items-center font-semibold">
							Congrants Your input was valid!
							<AiOutlineCheckCircle className="fill-green-500 w-7 h-7 ml-2" />
						</div>
					)}
				</div>
			</div>
		</>
	);
}
